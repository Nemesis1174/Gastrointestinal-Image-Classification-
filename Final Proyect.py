# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hTGQK_iiTV2roaWT3vHmGVwcFm6HqMEq
"""

# 1. Mount Google Drive
from google.colab import drive
drive.mount('/content/drive')

# 2. Unzip the dataset ZIP file (adjust if the path changes)
zip_path = '/content/drive/MyDrive/kvasir-separado.zip'
extract_path = '/content/kvasir_dataset'

!unzip -q "$zip_path" -d "$extract_path"
!ls "$extract_path"

# 3. Install fastai y albumentations
!pip install -q fastai albumentations

# 4. Define dataset path
from fastai.vision.all import *
from pathlib import Path
from fastai.metrics import F1Score, Precision, Recall
import albumentations as A
from albumentations.pytorch import ToTensorV2
import numpy as np

# 5. Definir ruta del dataset
path = Path('/content/kvasir_dataset/kvasir-separado')

# 6. Define custom transformation with Albumentations
def get_albumentations_tfms():
    return A.Compose([
        A.CLAHE(clip_limit=4.0, tile_grid_size=(8, 8), p=0.5),                  # Enhance local contrast
        A.RandomBrightnessContrast(0.2, 0.2, p=0.5),                            # Global adjustment
        A.GaussianBlur(blur_limit=(3, 5), p=0.3),                               # Blur for robustness
        A.HorizontalFlip(p=0.5),                                                # Flip
        A.Rotate(limit=15, p=0.4),                                              # Slight rotation
        A.Resize(224, 224),                                                     # Final size
        A.Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225)),     # ImageNet normalization
        ToTensorV2()
    ])

# 7. Create class to use Albumentations with FastAI
class AlbumentationsTransform(Transform):
    def __init__(self, aug): self.aug = aug
    def encodes(self, img: PILImage):
        aug_img = self.aug(image=np.array(img))['image']
        return TensorImage(aug_img)

# 8. Create DataLoaders with transformations
dls = ImageDataLoaders.from_folder(
    path,
    train='train',
    valid='val',
    item_tfms=Resize(256),  # Resize before cropping
    batch_tfms=[AlbumentationsTransform(get_albumentations_tfms())],
    bs=32
)

print("Clases:", dls.vocab)

# 9. Create and compile the Learner with metrics
precision = Precision(average='macro')
recall = Recall(average='macro')
f1 = F1Score(average='macro')

learn = vision_learner(dls, resnet50, metrics=[accuracy, precision, recall, f1])
learn.lr_find()

from fastai.callback.tracker import SaveModelCallback

# Initial training with 10 epochs
learn.fit_one_cycle(10, 1e-3, cbs=SaveModelCallback(monitor='valid_loss', fname='best_model'))

# Unfreeze the entire model for fine-tuning
learn.unfreeze()

# Training with 20 epochs and save the best model
learn.fit_one_cycle(20, lr_max=slice(1e-6, 1e-4), cbs=SaveModelCallback(monitor='valid_loss', fname='best_model'))

# 11. Save model
learn.export('/content/kvasir_v2_resnet50.pkl')

# 12. Interpretation and analysis
interp = ClassificationInterpretation.from_learner(learn)
interp.plot_confusion_matrix(figsize=(10,10), dpi=80)

interp.plot_top_losses(9, figsize=(15,12))
print(interp.most_confused(min_val=3))

# 13. Final Macro F1
preds, targs = learn.get_preds(ds_idx=1)
pred_labels = preds.argmax(dim=1)
from sklearn.metrics import f1_score
f1_macro = f1_score(targs, pred_labels, average='macro')
print(f"F1 macro final en validación: {f1_macro:.4f}")

# 14. Calculation of detailed metrics
from sklearn.metrics import precision_score, recall_score, accuracy_score, multilabel_confusion_matrix
import pandas as pd
import numpy as np

preds, targs = learn.get_preds()
pred_labels = preds.argmax(dim=1).numpy()
true_labels = targs.numpy()
classes = dls.vocab

precision = precision_score(true_labels, pred_labels, average=None, zero_division=0)
recall = recall_score(true_labels, pred_labels, average=None, zero_division=0)
f1 = f1_score(true_labels, pred_labels, average=None, zero_division=0)
accuracy = accuracy_score(true_labels, pred_labels)

mcm = multilabel_confusion_matrix(true_labels, pred_labels)

metrics = []
for i, cls in enumerate(classes):
    tn, fp, fn, tp = mcm[i].ravel()
    metrics.append({
        'class': cls,
        'precision': precision[i],
        'recall': recall[i],
        'f1_score': f1[i],
        'accuracy': accuracy,
        'TP': tp,
        'TN': tn,
        'FP': fp,
        'FN': fn
    })

df = pd.DataFrame(metrics)
csv_path = 'Kvasir_fastai_metrics.csv'
df.to_csv(csv_path, index=False)
print(f"✅ Métricas guardadas en: {csv_path}")

# 15. Show table
df[['precision', 'recall', 'f1_score', 'accuracy']] = df[['precision', 'recall', 'f1_score', 'accuracy']].round(4)
from tabulate import tabulate
print("\nMétricas por clase:\n")
print(tabulate(df, headers='keys', tablefmt='fancy_grid', showindex=False))